apiVersion: v1
kind: ConfigMap
metadata:
  name: copilot-api-config
  namespace: production
  labels:
    app: copilot-api
    env: production
data:
  NODE_ENV: "production"
  PORT: "3000"
  HOST: "0.0.0.0"
  LOG_LEVEL: "warn"
  LOG_FORMAT: "json"
  MANUAL_APPROVE: "false"
  SHOW_TOKEN: "false"
  ENABLE_METRICS: "true"
  ENABLE_HEALTH_CHECKS: "true"
  ENABLE_VALIDATION: "true"
  ENABLE_RATE_LIMITING: "true"
  ENABLE_GRACEFUL_SHUTDOWN: "true"
  RATE_LIMIT_SECONDS: "1"
  RATE_LIMIT_WAIT: "false"
  MAX_REQUEST_SIZE: "10MB"
  REQUEST_TIMEOUT: "30000"
  KEEPALIVE_TIMEOUT: "5000"
  METRICS_ENDPOINT: "/metrics"
  HEALTH_ENDPOINT: "/health"

---
apiVersion: v1
kind: Secret
metadata:
  name: copilot-api-secrets
  namespace: production
  labels:
    app: copilot-api
    env: production
type: Opaque
data:
  # Base64 encoded GitHub token - replace with actual value
  # echo -n "ghp_your_token_here" | base64
  GITHUB_TOKEN: Z2hwX3lvdXJfdG9rZW5faGVyZQ==

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: copilot-api
  namespace: production
  labels:
    app: copilot-api
    env: production
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: copilot-api
      env: production
  template:
    metadata:
      labels:
        app: copilot-api
        env: production
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: copilot-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: copilot-api
        image: copilot-api:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: copilot-api-secrets
              key: GITHUB_TOKEN
        envFrom:
        - configMapRef:
            name: copilot-api-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 12
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      terminationGracePeriodSeconds: 60
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - copilot-api
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: copilot-api
  namespace: production
  labels:
    app: copilot-api
    env: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-scheme: internal
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: copilot-api
    env: production

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: copilot-api
  namespace: production
  labels:
    app: copilot-api
    env: production

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: copilot-api-network-policy
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: copilot-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for GitHub API
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: copilot-api-pdb
  namespace: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: copilot-api
      env: production

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: copilot-api-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: copilot-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60