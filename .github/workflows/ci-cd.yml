name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.19.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Code Quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check TypeScript compilation
        run: npm run build

      - name: Check code formatting
        run: npx prettier --check .

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        test_type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test_type }} tests
        run: |
          if [ "${{ matrix.test_type }}" = "unit" ]; then
            npm test -- tests/unit/
          elif [ "${{ matrix.test_type }}" = "integration" ]; then
            npm test -- tests/integration/
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test_type }}
          path: |
            test-results.xml
            coverage/
          retention-days: 30

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run security tests
        run: npm test -- tests/unit/security.test.ts

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm test -- tests/unit/performance.test.ts

      - name: Run load test simulation
        run: |
          # Start server in background
          npm run build
          timeout 30s npm start &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Run simple load test
          for i in {1..10}; do
            curl -s -o /dev/null -w "%{http_code}\n" http://localhost:3000/health || true
          done
          
          # Stop server
          kill $SERVER_PID || true

  # Build and Test Docker Image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-20.04
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Test that the image runs and health check passes
          docker run --name test-container -d -p 3000:3000 \
            -e NODE_ENV=production \
            -e GITHUB_TOKEN=test \
            -e ENABLE_HEALTH_CHECKS=true \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/health || exit 1
          
          # Clean up
          docker stop test-container
          docker rm test-container

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-20.04
    needs: [lint, test, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://copilot-api-staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # kubectl set image deployment/copilot-api copilot-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n staging

      - name: Run staging health check
        run: |
          # Wait for deployment to complete
          sleep 30
          
          # Run health check
          ./scripts/health-check.sh
        env:
          API_URL: https://copilot-api-staging.example.com

      - name: Run staging smoke tests
        run: |
          echo "Running staging smoke tests..."
          # Add staging-specific tests here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-20.04
    needs: [lint, test, security, performance, docker]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://copilot-api.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # kubectl set image deployment/copilot-api copilot-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} -n production

      - name: Run production health check
        run: |
          # Wait for deployment to complete
          sleep 60
          
          # Run comprehensive health check
          ./scripts/health-check.sh
        env:
          API_URL: https://copilot-api.example.com
          VERBOSE: true
          EXIT_ON_WARNING: true

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add production-specific tests here

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          # Add failure notification logic

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-20.04
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Clean up old images
        run: |
          echo "Cleaning up old container images..."
          # Add cleanup logic for old images
          
      - name: Clean up test artifacts
        run: |
          echo "Cleaning up test artifacts..."
          # Add cleanup logic for test files